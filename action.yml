#
# .github/workflows/build-on-windows.yml
#
# Copyright 2021 Jens A. Koch.
# SPDX-License-Identifier: BSL-1.0
# This file is part of ttauri-project.
#

name: "Install Vulkan SDK"
description: "Installs the current Vulkan SDK"
inputs:
  install:
    description: "Install the SDK on true, or only set VULKAN_SDK output variable on false."
    required: true
    
outputs:
  VULKAN_VERSION:
    description: "Version number of the vulkan sdk"
    value: ${{ steps.vulkan-environment.outputs.VULKAN_VERSION }}
    
  VULKAN_SDK:
    description: "Location of the vulkan sdk"
    value: ${{ steps.vulkan-environment.outputs.VULKAN_SDK }}

runs:
  using: "composite"
  steps:
    - name: ðŸ“¥ Set latest VULKAN_VERSION as environment variable
      shell: pwsh
      run: |
          echo 'VULKAN_VERSION<<EOF' >> $env:GITHUB_ENV
          curl --silent https://vulkan.lunarg.com/sdk/latest/windows.txt >> $env:GITHUB_ENV
          echo 'EOF' >> $env:GITHUB_ENV
        
    - name: ðŸ“¥ Setup download urls VULKAN_SDK_URL & VULKAN_RUN_URL
      id: vulkan-environment
      shell: pwsh
      run: |
        $env:BASE_URL="https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows"
        $env:VULKAN_SDK_URL="${env:BASE_URL}/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe?Human=true"
        $env:VULKAN_RUN_URL="${env:BASE_URL}/vulkan-runtime-components.zip?Human=true"
        $env:VULKAN_SDK="C:\VulkanSDK\${env:VULKAN_VERSION}"
        echo "VULKAN_SDK=${env:VULKAN_SDK}" >> $env:GITHUB_ENV
        echo "VULKAN_SDK_URL=${env:VULKAN_SDK_URL}" >> $env:GITHUB_ENV
        echo "VULKAN_RUN_URL=${env:VULKAN_RUN_URL}" >> $env:GITHUB_ENV
        echo "::set-output name=VULKAN_VERSION::${env:VULKAN_VERSION}"
        echo "::set-output name=VULKAN_SDK::${env:VULKAN_SDK}"

    - name: ðŸ”½ Install VULKAN_SDK
      shell: cmd
      run: |
          if "%INPUT_INSTALL%" EQU "true" curl -L --silent --show-error --output VulkanSDK.exe %VULKAN_SDK_URL%
          if "%INPUT_INSTALL%" EQU "true" VulkanSDK.exe in com.lunarg.vulkan.core --accept-licenses --default-answer --confirm-command --root %VULKAN_SDK%
         
    - name: ðŸ”½ Install VULKAN Runtime (âž” vulkan-1.dll)
      shell: pwsh
      run: |
        if ( "${env:INPUT_INSTALL}" -eq "true")
        {
          curl -L --silent --show-error --output vulkan-runtime.zip "${env:VULKAN_RUN_URL}"
          7z e vulkan-runtime.zip -o${env:VULKAN_SDK}\runtime\x64 */x64
        }

    - name: âœ‚ Reduce VULKAN_SDK size before caching
      shell: pwsh
      run: |
        if ( "${env:INPUT_INSTALL}" -eq "true")
        {
          cd "${env:VULKAN_SDK}"
          "Folder size before: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
          Remove-Item -Recurse -Force "Demos"
          Remove-Item -Recurse -Force "Helpers"
          Remove-Item -Recurse -Force "installerResources"
          Remove-Item -Recurse -Force "Licenses"
          Remove-Item -Recurse -Force "Templates"
          Remove-Item -Recurse -Force "Tools"
          Remove-Item -Recurse -Force "Source"
          Remove-Item .\maintenancetool.*, .\components.xml, .\network.xml, .\installer.dat, .\InstallationLog.txt
          "Folder size after: {0:N2} MB" -f ((ls . -r | Measure-Object -Property Length -Sum).Sum / 1MB)
        }
